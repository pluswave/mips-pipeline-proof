%% 寄存器堆以及数据存储器的读写
stores: THEORY
BEGIN

%IMPORTING memaddr_align
IMPORTING bitvectors@top
IMPORTING bvconsts
%%%---------------------------------------------------------------------
%%% 寄存器堆类型

    
reg_addr: TYPE = { a:bvec[5] | a /= zero_reg }
regfile: TYPE = [reg_addr -> bvec[32]]


%%---
%% 寄存器堆操作.

%% 读寄存器.
select(rf:regfile,r:reg_addr):bvec[32] = 
	rf(r)

%% 写寄存器.
assign(rf:regfile,r:reg_addr,data:bvec[32]):regfile =
	rf WITH [(r) := data]

%---
%%% 31号寄存器为返回地址
ra_reg: reg_addr = fill[5](TRUE)

%|- ra_reg_TCC1 : PROOF
%|- (then (expand zero_reg) (decompose-equality)
%|-   (inst -1 0) (grind))
%|- QED

%%--
%% 读写寄存器堆的两个属性.
r1, r2 : VAR reg_addr
rf : VAR regfile
d32: VAR bvec[32]


%|- select_assign* : PROOF
%|- (then (auto-rewrite-theory stores :always? T) (skosimp) (assert))
%|- QED

select_assign1: LEMMA
        r2 = r1 IMPLIES select(assign(rf,r1,d32),r2) = d32

select_assign2: LEMMA
        r2 /= r1 IMPLIES select(assign(rf,r1,d32),r2) = select(rf,r2)

select_r(rf:regfile, a:bvec[5]): bvec[32] = 
   IF a = zero_reg THEN zero ELSE select(rf,a) ENDIF


assign_r(rf:regfile, a:bvec[5], d:bvec[32]): regfile =
   IF a = zero_reg THEN rf ELSE assign(rf,a,d) ENDIF

%%%---------------------------------------------------------------------
%%% 数据内存类型


dmem_addr_valid? : pred[bvec[32]]

dmem_addr_1:  AXIOM EXISTS (x: bvec[32]): dmem_addr_valid?(x)
dmem_addr_2:  AXIOM EXISTS (x: bvec[32]): NOT dmem_addr_valid?(x)


dmem_addr: TYPE+ = { a: bvec[32] | dmem_addr_valid?(a) } 

%|- dmem_addr_TCC1 : PROOF
%|-  (then (lemma dmem_addr_1) (skosimp) (inst?))
%|- QED

data_memory: TYPE = [dmem_addr -> bvec[8] ]
dmem : VAR data_memory
addr, addr2: VAR dmem_addr
d8: VAR bvec[8]
d16: VAR bvec[16]

%% 数据内存上的操作,假定为Little Endian
read8(dmem,addr):bvec[8] =
	dmem(addr)

write8(dmem,addr,d8): data_memory =
	dmem WITH [ (addr) := d8 ]

align_16 : [ dmem_addr, bvec[1] -> dmem_addr ] 
align_32 : [ dmem_addr, bvec[2] -> dmem_addr ] 

read16(dmem,addr):bvec[16] =
    read8(dmem, align_16(addr,b1) ) o  read8(dmem, align_16(addr,b0))  

write16(dmem,addr,d16) : data_memory =
    write8( write8(dmem, align_16(addr,b1), d16^(15,8) ),
            align_16(addr,b0), d16^(7,0) )

read32(dmem,addr):bvec[32] = 
    read16(dmem, align_32(addr,b1 o b0 )) o read16(dmem, align_32(addr, b0 o b0)) 

write32(dmem,addr, d32): data_memory =  
    write16( write16( dmem, align_32(addr,b1 o b0), d32^(31,16)),
                align_32(addr, b0 o b0), d32^(15,0) )


% %%--
% %% 8位读写属性

% %|- read_write_*_* : PROOF
% %|- (then (auto-rewrite-theory stores :always? T) (skosimp) (assert))
% %|- QED


% read_write_8_1: LEMMA
%         addr2 = addr IMPLIES read8(write8(dmem,addr,d8),addr2) = d8

% read_write_8_2: LEMMA
%         addr2 /= addr IMPLIES read8(write8(dmem,addr,d8),addr2) = read8(dmem,addr2)



% %% 读写存储器不涉及多周期操作，无需给出定理。
% %%--
% %% 16位读写属性，与8位类似

% read_write_16_1: LEMMA
%         align_16(addr2,b0) = align_16(addr,b0) IMPLIES read16(write16(dmem,addr,d16),addr2) = d16

% read_write_16_2: LEMMA
%         align_16(addr2,b0) /= align_16(addr,b0) IMPLIES read16(write16(dmem,addr,d16),addr2) = read16(dmem,addr2)


% %%--
% %% 32位读写属性，与16位类似

% read_write_32_1: LEMMA
%         align_32(addr2,b0 o b0) = align_32(addr,b0 o b0) IMPLIES read32(write32(dmem,addr,d32),addr2) = d32

% read_write_32_2: LEMMA
%         align_32(addr2,b0 o b0) /= align_32(addr,b0 o b0) IMPLIES read32(write32(dmem,addr,d32),addr2) = read32(dmem,addr2)




END stores

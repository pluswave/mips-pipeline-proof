implementation_invariants: THEORY
BEGIN


IMPORTING implementation_rewrites_1
IMPORTING abstraction_rewrites

q: VAR state_I


regaddr: VAR bvec[5]

inv_wb_rf_1: LEMMA I_step(q)`a_s`rf = Complete_till_MEM_WB(q)`a_s`rf

%|- inv_wb_rf_1 : PROOF
%|- (then (skosimp) (impl-invs) (abs-rewrites)
%|-  (expand Complete_till_MEM_WB) (assert) (impl-defs) (assert) (expand I_step) (assert))
%|- QED


inv_syn1_dep_mem_wb: LEMMA syn1_dep_wb_dst(I_step(q)) = syn1_dep_mem_dst(q)

%|- inv_syn1_dep_mem_wb : PROOF
%|- (then (skosimp)
%|-  (auto-rewrite-theory implementation_state_1_sync :always? T) (assert)
%|-  (decompose-equality) (impl-defs) (assert) (expand I_step) (assert)
%|-  (case-analysis))
%|- QED



wb_dep_1: LEMMA syn1_dep_wb_dst(q)(regaddr) IMPLIES select_r(Complete_till_MEM_WB(q)`a_s`rf,regaddr) = q`wb_s`val

wb_dep_2: LEMMA NOT syn1_dep_wb_dst(q)(regaddr) IMPLIES select_r(Complete_till_MEM_WB(q)`a_s`rf, regaddr) = select_r(q`a_s`rf, regaddr)

mem_dep_1: LEMMA syn1_dep_mem_dst(q)(regaddr) IMPLIES select_r(Complete_till_EX_MEM(q)`a_s`rf,regaddr) = impl_next_wb_val(q)

mem_dep_2: LEMMA NOT syn1_dep_mem_dst(q)(regaddr) IMPLIES select_r(Complete_till_EX_MEM(q)`a_s`rf, regaddr) = select_r(Complete_till_MEM_WB(q)`a_s`rf, regaddr)

ex_wb_1: LEMMA NOT syn1_get_ex_wb?(q) IMPLIES NOT abs_ex_rf_wen(Complete_till_EX_MEM(q))

%|- ex_wb_1 : PROOF
%|- (then (skosimp) (abs-rewrites) (expand abs_ex_rf_wen)
%|-  (expand syn1_get_ex_wb?) (assert) (flatten) (assert))
%|- QED


ex_dep_1: LEMMA NOT syn1_dep_ex_dst(q)(regaddr) IMPLIES select_r(Complete_till_ID_EX(q)`a_s`rf, regaddr) = select_r(Complete_till_EX_MEM(q)`a_s`rf, regaddr)

%|- ex_dep_1 : PROOF
%|- (then (skosimp) (impl-invs) (abs-rewrites) (assert)
%|-  (expand Complete_till_ID_EX) (assert) (case-analysis)
%|-  (auto-rewrite-theory stores :always? T) (expand syn1_dep_ex_dst)
%|-  (spread (split 1)
%|-   ((assert) (then (assert) (expand rf_update) (propax))
%|-    (then (expand rf_update) (lift-if) (bddsimp)
%|-     (auto-rewrite-theory stores :always? T) (assert) (case-analysis)))))
%|- QED


%|- wb_dep_*[MEM_WB] : PROOF
%|- mem_dep_*[EX_MEM] : PROOF
%|- (then (skosimp) (impl-defs) (abs-rewrites) (assert)
%|-  (expand Complete_till_#1) (assert)
%|-  (auto-rewrite-theory datapath :always? T)
%|-  (auto-rewrite-theory stores :always? T) (assert) (case-analysis))
%|- QED


Reachable?_mem_rt_mem(q): bool = syn1_mem_need_rt_mem(q)  IMPLIES syn1_mux_mem_rt(q) = abs_mem_rt(Complete_till_MEM_WB(q)) 

Reachable?_ex_rs_ex(q): bool = syn1_ex_need_rs_ex(q)  IMPLIES syn1_mux_ex_rs(q) = abs_ex_rs(Complete_till_EX_MEM(q))

Reachable?_ex_rt_ex(q): bool = syn1_ex_need_rt_ex(q)  IMPLIES syn1_mux_ex_rt(q) = abs_ex_rt(Complete_till_EX_MEM(q))

Reachable?_ex_rt_mem(q): bool = syn1_ex_need_rt(q) AND NOT syn1_dep_mem_dst(q)(rt(q`ex_s`instr)) AND NOT syn1_dep_wb_dst(q)(rt(q`ex_s`instr)) 
                         IMPLIES select_r(q`a_s`rf,rt(q`ex_s`instr)) = q`ex_s`rt

Reachable?_id_rs_id(q): bool = syn1_id_need_rs_id(q)  AND NOT syn1_stall_issue(q) IMPLIES syn1_mux_id_rs(q) = abs_id_rs(Complete_till_ID_EX(q))

Reachable?_id_rt_id(q): bool = syn1_id_need_rt_id(q)  AND NOT syn1_stall_issue(q) IMPLIES syn1_mux_id_rt(q) = abs_id_rs(Complete_till_ID_EX(q))


Reachable?(q) : bool = Reachable?_mem_rt_mem(q) AND Reachable?_ex_rt_mem(q) AND Reachable?_ex_rs_ex(q) AND Reachable?_ex_rt_ex(q) AND Reachable?_id_rs_id(q) AND Reachable?_id_rt_id(q)


Inv_Init: THEOREM Init?(q) IMPLIES Reachable?(q)

%|- Inv_Init : PROOF
%|- (then (skosimp) (impl-invs) (assert)
%|-  (auto-rewrite-theory implementation_state_1_sync) (assert)
%|-  (case-analysis))
%|- QED

Inv_mem_rt_mem: THEOREM Reachable?_ex_rt_mem(q) IMPLIES Reachable?_mem_rt_mem(I_step(q))

%|- Inv_mem_rt_mem : PROOF
%|- (then (skosimp) (impl-invs) (abs-rewrites) (assert) (flatten)
%|-  (assert)
%|-  (expand syn1_mux_mem_rt) (assert)
%|-  (spread (case-analysis)
%|-   ((then (expand I_step (2) 1) (assert) (expand syn1_mux_ex_rt)
%|-     (propax))
%|-    (then (expand I_step (2) 1) (assert) (expand syn1_mux_ex_rt)
%|-     (case-analysis))
%|-    (then (expand syn1_ex_need_rt) (assert)))))
%|- QED


% 可以工作的版本，有点长
%|- Inv_mem_rt_mem : PROOF
%|- (then (skosimp) (auto-rewrite-theory implementation_invariants)
%|-  (assert) (flatten) (expand syn1_mux_mem_rt) (expand abs_mem_rt)
%|-  (spread (case-analysis)
%|-   ((then (abs-rewrites) (assert))
%|-    (then (abs-rewrites) (assert) (expand I_step (2) 1) (assert)
%|-     (impl-defs) (stop-rewrite syn1_dep_mem_dst) (assert)
%|-     (expand I_step +) (assert))
%|-    (then (abs-rewrites) (assert))
%|-    (then (abs-rewrites) (assert)
%|-     (auto-rewrite-theory implementation_rewrites_1) (assert)
%|-     (use Rewrite_sync_mem_rt_1) (rewrite -3) (expand I_step)
%|-     (expand i1t_next_ex_mem) (assert) (expand syn1_mux_ex_rt) (propax))
%|-    (then (abs-rewrites) (assert))
%|-    (then (abs-rewrites) (assert)
%|-     (auto-rewrite-theory implementation_rewrites_1) (assert)
%|-     (expand I_step (2)) (assert) (expand i1t_next_ex_mem) (assert)
%|-     (expand syn1_mux_ex_rt) (case-analysis))
%|-    (then (abs-rewrites) (auto-rewrite-theory implementation_rewrites_1)
%|-     (assert))
%|-    (then (abs-rewrites) (auto-rewrite-theory implementation_rewrites_1)
%|-     (assert) (expand I_step (3)) (assert) (expand syn1_ex_need_rt)
%|-     (assert)))))
%|- QED



Inv_ex_rs_ex: THEOREM Reachable?_ex_rs_ex(I_step(q))
Inv_ex_rt_ex: THEOREM Reachable?_ex_rt_ex(I_step(q))

%|- Inv_ex_*_ex : PROOF
%|- (then (skosimp) (impl-invs) (abs-rewrites) (assert) (flatten)
%|-  (expand syn1_mux_ex_$1) (assert) (case-analysis) (expand I_step (3))
%|-  (assert) (expand syn1_mux_id_$1) (assert) (case-analysis)
%|-  (expand rf_get_output) (propax))
%|- QED


Inv_ex_rt_mem: THEOREM Reachable?_ex_rt_mem(I_step(q))

%|- Inv_ex_rt_mem : PROOF
%|- (then (skosimp) (impl-invs) (abs-rewrites) (assert) (flatten)
%|-  (expand I_step (3)) (assert) (expand syn1_mux_id_rt) (assert)
%|-  (case-analysis) (expand rf_get_output) (propax))
%|- QED

Inv_id_rs_id: THEOREM Reachable?_id_rs_id(q)

%|- Inv_id_*_id : PROOF
%|- (then (skosimp) (impl-invs) (abs-rewrites) (assert) (flatten)
%|-  (expand syn1_stall_issue) (flatten) 
%|-  (expand syn1_rt_no_stall) (flatten) (expand syn1_rt_id_mem_no_stall)
%|-  (expand syn1_rt_id_ex_no_stall)  (assert)
%|-  (expand syn1_mux_id_rt) (case-analysis) (expand rf_get_output)
%|-  (propax))
%|- QED

Inv_id_rt_id: THEOREM Reachable?_id_rt_id(q)



Inv_implementation: THEOREM Reachable?(q) IMPLIES Reachable?(I_step(q))

%|- Inv_implementation : PROOF
%|- (then (skosimp) (expand Reachable?)
%|-  (auto-rewrite-theory implementation_invariants) (assert) (flatten)
%|-  (assert) (use Inv_mem_rt_mem) (assert))
%|- QED


END implementation_invariants

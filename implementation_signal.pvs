implementation_state_1_signal: THEORY
BEGIN

IMPORTING implementation_state_1_sync

% 基于流水线状态的基本组合逻辑
q: VAR state_I

i1s_ifu(q): ifu = (# pc := q`a_s`pc, imem := q`a_s`imem #)

i1s_dmem_wen(q): bool = LET dec = impl_dec_mem(q) IN q`mem_s`state = normal AND dec`store?
            AND ( dec`atom? IMPLIES q`a_s`llflag )


i1s_dmem_input_write(q): dmem_input_write = LET dec = impl_dec_mem(q) IN
   (# addr := q`mem_s`aluout,
      wen := i1s_dmem_wen(q),
      value :=  syn1_mux_mem_rt(q),
      mwidth := dec`mwidth  #)


i1s_src1(q): bvec[32] = src1_mux( impl_dec_ex(q), syn1_mux_ex_rs(q), syn1_mux_ex_rt(q))

i1s_src2(q): bvec[32] = src2_mux( impl_dec_ex(q), syn1_mux_ex_rt(q), q`ex_s`instr )

i1s_next_aluout(q): alu_out =
             alu( i1s_src1(q), i1s_src2(q),impl_dec_ex(q)`aluop )

i1s_ex_exception(q): bool = LET dec = impl_dec_ex(q) IN
           q`ex_s`state = exception OR ( q`ex_s`state = normal AND
           (( dec`checkov? AND i1s_next_aluout(q)`ov ) OR
            (( dec`load? OR dec`store? ) AND
             NOT dmem_addr_valid?(i1s_next_aluout(q)`out))))


i1s_next_mem_state(q): stage_state = 
        IF q`mem_s`state = exception THEN bubble
        ELSIF i1s_ex_exception(q) THEN exception
        ELSE q`ex_s`state ENDIF


i1s_branch_addr(q): bvec[32] = q`id_s`pc + 4 + sign_extend[16](32) (short_immed_of (q`id_s`instr))  

i1s_jmp_addr(q): bvec[32] = (q`id_s`pc + 4)^(31,28) o long_immed_of(q`id_s`instr) o b00

i1s_rs_eq_rt(q): bool = syn1_mux_id_rs(q) = syn1_mux_id_rt(q)


i1s_id_branch_taken(q): bool = LET dec = impl_dec_id(q) IN
      ( dec`beq? AND i1s_rs_eq_rt(q) ) OR ( dec`bne? AND NOT i1s_rs_eq_rt(q) )


i1s_next_pc(q): bvec[32]
            = LET dec = impl_dec_id(q) IN
              IF   q`mem_s`state = exception THEN exception_entry 
              ELSIF syn1_stall_issue(q) THEN q`a_s`pc
              ELSIF q`id_s`state = normal THEN
                TABLE
             %------------------------+--------------------++
             | i1s_id_branch_taken(q) | i1s_branch_addr(q) ||
             | dec`jmp?               | i1s_jmp_addr(q)    ||
             | dec`jr?                | syn1_mux_id_rs(q)  ||
             | ELSE                   | zero               ||
             %------------------------+--------------------++
                ENDTABLE
              ELSE zero ENDIF

i1s_npc_valid(q): bool = LET dec = impl_dec_id(q) IN 
             q`mem_s`state = exception  OR syn1_stall_issue(q) OR
             ( q`id_s`state = normal  AND
               ( i1s_id_branch_taken(q) OR
                 dec`jmp? OR dec`jr? ) )

i1s_next_ex_state(q): stage_state = LET dec=impl_dec_id(q) IN
             IF q`mem_s`state = exception THEN bubble
             ELSIF dec`invalid?   THEN exception
             ELSIF syn1_stall_issue(q) THEN bubble 
             ELSE q`id_s`state ENDIF


i1s_next_id_state(q): stage_state = 
             IF NOT ifu_get_addr_valid(i1s_ifu(q)) THEN exception
             ELSE normal ENDIF

i1s_get_instr(q): bvec[32] = ifu_get_instr(i1s_ifu(q))


END implementation_state_1_signal

bvlogic: THEORY
BEGIN

IMPORTING bitvectors@top

even_is_not_odd: LEMMA FORALL(i:int): even?(i) = NOT odd?(i)
even_add_keep_even_odd_1: LEMMA FORALL(i:int) : FORALL(e:even_int) : even?(i) = even?(i+e)
even_add_keep_even_odd_2: LEMMA FORALL(i:int) : FORALL(e:even_int) : odd?(i) = odd?(i+e)


N: VAR posnat
M: VAR nat

bv2nat_rec_inj_strong_pre: LEMMA FORALL( n: upto(N), bv1: bvec[N], bv2: bvec[M] ) : bv2nat_rec[N](n, bv1) = bv2nat_rec[N+M](n, bv2 o bv1)


bv2nat_rec_inj_strong: LEMMA FORALL( n: upto(N), bv1: bvec[N+M], bv2: bvec[N]):
      bv2nat_rec[N+M](n, bv1) = bv2nat_rec[N](n, bv2)
        <=>  (FORALL (m: below(N)): (m < n) IMPLIES bv1(m) = bv2(m))


b2n_zero_even: LEMMA FORALL(N: posnat): (FORALL (a:bvec[N]): ^[N] (a, 0) = FALSE IFF even?(bv2nat(a)))  

b0_is_not_equal_to_b1: LEMMA b0 /= b1
b00: bvec[2] = b0 o b0
b01: bvec[2] = b0 o b1
b10: bvec[2] = b1 o b0
b11: bvec[2] = b1 o b1


END bvlogic

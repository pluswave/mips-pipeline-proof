specification: THEORY
BEGIN

importing abstract_instructions
importing specification_state

a: VAR state_A

A_step(a): state_A


% 架构状态的指令：如果PC指向有效地址，则该指令存储器中的内容，否则用0占位这个定义
instr(a) : instruction =
	IF imem_addr_pred(pc(a)) THEN imem(a)(pc(a)) ELSE zero ENDIF


rs(a): bvec[32] = select_r(rf(a), rs(instr(a)))
rt(a): bvec[32] = select_r(rf(a), rt(instr(a)))

mem_addr_calcu(a): bvec[32] = LET ins = instr(a) IN rs(a) + sign_extend[16](32)(short_immed_of(ins))

%  指令语义公理

next_pc(a): bvec[32] = pc(A_step(a))
next_imem(a): instruction_memory = imem(A_step(a))
next_dmem(a): data_memory = dmem(A_step(a))
next_rf(a): regfile = rf(A_step(a))
next_epc(a): bvec[32] = epc(A_step(a))
next_llflag(a): bool = llflag(A_step(a))

nochange_pc(a): bool = next_pc(a) = pc(a)
nochange_dmem(a): bool = next_dmem(a) = dmem(a)
nochange_rf(a): bool = next_rf(a) = rf(a)
nochange_epc(a): bool = next_epc(a) = epc(a)
nochange_llflag(a): bool = next_llflag(a) = llflag(a)

% 
action_rf_only(a): bool =  next_pc(a) = pc(a) + 4 AND nochange_dmem(a) AND nochange_llflag(a) AND nochange_epc(a)

%
action_pc_only(a): bool = nochange_dmem(a) AND nochange_rf(a) AND nochange_epc(a) AND nochange_llflag(a)

% store类型仅仅修改dmem
action_dmem_only(a): bool = next_pc(a) = pc(a) + 4 AND nochange_rf(a) AND nochange_llflag(a) AND nochange_epc(a)

% ll与load基本相同，除了修改llflag
action_dmem_llflag(a): bool = next_pc(a) = pc(a) + 4 AND nochange_epc(a) AND nochange_rf(a)

action_rf_llflag(a):   bool = next_pc(a) = pc(a) + 4 AND nochange_epc(a) AND nochange_dmem(a)

action_exception(a): bool = next_pc(a) = exception_entry AND next_epc(a) = pc(a)  AND 
                   next_llflag(a) = FALSE AND nochange_rf(a) AND nochange_dmem(a)

%
action_pc_rf(a): bool = nochange_dmem(a) AND nochange_llflag(a) AND nochange_epc(a)

spec_0_goal: bool = FORALL (a:state_A): next_imem(a) = imem(a)

spec_1_goal: bool = FORALL (a:state_A): IF NOT imem_addr_pred(pc(a)) THEN action_exception(a) 
         ELSE LET ins = instr(a),
                  op  = get_abs_opcode(ins)
              IN 
           CASES op OF
            add: IF NOT overflow(rs(a),rt(a)) THEN 
                          next_rf(a) = assign_r(rf(a), rd(ins), rs(a) + rt(a)) AND action_rf_only(a)
                         ELSE action_exception(a) ENDIF,
            addu: next_rf(a) = assign_r(rf(a), rd(ins), rs(a) + rt(a)) AND action_rf_only(a),

            sub: IF NOT ( bv2int(rt(a)) = minint[32] XOR overflow(rs(a), -rt(a))) THEN 
                           next_rf(a) = assign_r(rf(a), rd(ins), rs(a) - rt(a)) AND action_rf_only(a)
                         ELSE action_exception(a) ENDIF,
            subu: next_rf(a) = assign_r(rf(a), rd(ins), rs(a) - rt(a)) AND action_rf_only(a),
            and: next_rf(a) = assign_r(rf(a), rd(ins), rs(a) AND rt(a)) AND action_rf_only(a),                     
            or:  next_rf(a) = assign_r(rf(a), rd(ins), rs(a) OR rt(a)) AND action_rf_only(a),
            nor: next_rf(a) = assign_r(rf(a), rd(ins), rs(a) XOR rt(a)) AND action_rf_only(a),
            slt: next_rf(a) = assign_r(rf(a), rd(ins), alu_slt(rs(a) , rt(a))) AND action_rf_only(a),
            sltu: next_rf(a) = assign_r(rf(a), rd(ins), alu_sltu(rs(a) , rt(a))) AND action_rf_only(a),
            srl: next_rf(a) = assign_r(rf(a), rd(ins), right_shift(shamt(ins), rt(a))) AND action_rf_only(a),
            sll: next_rf(a) = assign_r(rf(a), rd(ins), left_shift(shamt(ins), rt(a))) AND action_rf_only(a),
            jr:  next_pc(a) = rs(a) AND action_pc_only(a),
            bne :
              IF rs(a) /= rt(a) THEN 
                 next_pc(a) = pc(a) + 4 + sign_extend[16](32)(short_immed_of(ins)) 
              ELSE
                 next_pc(a) = pc(a) + 4
              ENDIF
              AND action_pc_only(a),
            beq : 
              IF rs(a) = rt(a) THEN 
                 next_pc(a) = pc(a) + 4 + sign_extend[16](32)(short_immed_of(ins)) 
              ELSE
                 next_pc(a) = pc(a) + 4
              ENDIF
              AND action_pc_only(a),
            addi: 
               IF NOT overflow(rs(a), sign_extend[16](32)(short_immed_of(ins))) THEN
                 next_rf(a) = assign_r(rf(a), rt(ins), rs(a) + sign_extend[16](32)(short_immed_of(ins))) AND action_rf_only(a)
               ELSE action_exception(a) ENDIF,
            addiu:
               next_rf(a) = assign_r(rf(a), rt(ins), rs(a) + sign_extend[16](32)(short_immed_of(ins))) AND action_rf_only(a),
            andi:
               next_rf(a) = assign_r(rf(a), rt(ins), rs(a) AND zero_extend[16](32)(short_immed_of(ins))) AND action_rf_only(a),
            ori:
               next_rf(a) = assign_r(rf(a), rt(ins), rs(a) OR zero_extend[16](32)(short_immed_of(ins))) AND action_rf_only(a),
            lbu:
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_rf(a) = assign_r(rf(a), rt(ins), zero_extend[8](32)(read8(dmem(a),mem_addr_calcu(a)))) AND action_rf_only(a) 
               ELSE action_exception(a) ENDIF,
            lb:
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_rf(a) = assign_r(rf(a), rt(ins), sign_extend[8](32)(read8(dmem(a),mem_addr_calcu(a)))) AND action_rf_only(a)
               ELSE action_exception(a) ENDIF,
            lh:
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_rf(a) = assign_r(rf(a), rt(ins), sign_extend[16](32)(read16(dmem(a),mem_addr_calcu(a)))) AND action_rf_only(a)
               ELSE action_exception(a) ENDIF,
            lhu:
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_rf(a) = assign_r(rf(a), rt(ins), zero_extend[16](32)(read16(dmem(a),mem_addr_calcu(a)))) AND action_rf_only(a)
               ELSE action_exception(a) ENDIF,
            lw:
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_rf(a) = assign_r(rf(a), rt(ins), read32(dmem(a),mem_addr_calcu(a))) AND action_rf_only(a)
               ELSE action_exception(a) ENDIF,
            ll: 
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_rf(a) = assign_r(rf(a), rt(ins), read32(dmem(a),mem_addr_calcu(a))) AND next_llflag(a) AND action_rf_llflag(a)
               ELSE action_exception(a) ENDIF,
            sb: 
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_dmem(a) = write8(dmem(a), mem_addr_calcu(a), rt(a)^(7,0)) AND action_dmem_only(a)
               ELSE action_exception(a) ENDIF,
            sh: 
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_dmem(a) = write16(dmem(a), mem_addr_calcu(a), rt(a)^(15,0)) AND action_dmem_only(a)
               ELSE action_exception(a) ENDIF,
            sw:
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
               next_dmem(a) = write32(dmem(a), mem_addr_calcu(a), rt(a)) AND action_dmem_only(a)
               ELSE action_exception(a) ENDIF,
            sc:
               IF  dmem_addr_valid?(mem_addr_calcu(a)) THEN
                 IF llflag(a) THEN next_dmem(a) = write32(dmem(a), mem_addr_calcu(a), rt(a)) ELSE nochange_dmem(a) ENDIF
                 AND NOT next_llflag(a) AND action_dmem_llflag(a)
               ELSE action_exception(a) ENDIF,
            lui:
               next_rf(a) = assign_r(rf(a), rt(ins), zero_extend_lsend[16](32)(short_immed_of(ins))) AND action_rf_only(a),
            slti:
               next_rf(a) = assign_r(rf(a), rt(ins), alu_slt(rs(a),sign_extend[16](32)(short_immed_of(ins)))) AND action_rf_only(a),
            sltiu: 
               next_rf(a) = assign_r(rf(a), rt(ins), alu_sltu(rs(a),zero_extend[16](32)(short_immed_of(ins)))) AND action_rf_only(a),
            j:
               next_pc(a) = ( pc(a) + 4 ) ^ (31,28) o long_immed_of(ins) o b00 AND action_pc_only(a),
            jal:
               next_pc(a) = ( pc(a) + 4 ) ^ (31,28) o long_immed_of(ins) o b00 AND 
               next_rf(a) = assign_r(rf(a), ra_reg, pc(a) + 4) AND action_pc_rf(a),             
            invalid: action_exception(a)
          ENDCASES
        ENDIF

END specification

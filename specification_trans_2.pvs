specification_trans_2: THEORY
BEGIN

IMPORTING specification_trans

a: VAR state_A

exception?(ins:instruction)(a) : bool
  = 
    LET op=get_abs_opcode(ins),
        mem_addr_valid_condition = dmem_addr_valid?(mem_addr_calcu(a))
    IN 
    TABLE
       op
      %-------+---------------------------------------------------------%%
      | add   | overflow(rs(a),rt(a))                                   ||
      | sub   | bv2int(rt(a)) = minint[32] XOR overflow(rs(a), -rt(a))  ||
      | addi  | overflow(rs(a),sign_extend[16](32)(short_immed_of(ins)))||
      | lb    | NOT mem_addr_valid_condition                            ||
      | lbu   | NOT mem_addr_valid_condition                            ||
      | lh    | NOT mem_addr_valid_condition                            ||
      | lhu   | NOT mem_addr_valid_condition                            ||
      | lw    | NOT mem_addr_valid_condition                            ||
      | ll    | NOT mem_addr_valid_condition                            ||
      | sb    | NOT mem_addr_valid_condition                            ||
      | sh    | NOT mem_addr_valid_condition                            ||
      | sw    | NOT mem_addr_valid_condition                            ||
      | sc    | NOT mem_addr_valid_condition                            ||
      |invalid| TRUE                                                    ||
      | ELSE  | FALSE                                                   ||
      %-------+---------------------------------------------------------%%
    ENDTABLE
            
% --- PC更新
next_pc_2(a) : bvec[32] = 
   IF NOT imem_addr_pred(pc(a)) THEN exception_entry
   ELSE 
    LET ins = instr(a), 
        op = get_abs_opcode(ins),
        normal_inc_pc  = pc(a) + 4,
        branch_pc = normal_inc_pc + sign_extend[16](32)(short_immed_of(ins)),
        jmp_pc = ( normal_inc_pc ) ^ (31,28) o long_immed_of(ins) o b00,
        may_exception_pc = IF exception?(ins)(a) THEN exception_entry ELSE normal_inc_pc ENDIF 
    IN 
    TABLE
       op
     %-----------+-----------------------------------------------------------%%
     | jr        | rs(a)                                                     ||
     | beq       | IF rs(a) = rt(a)  THEN branch_pc ELSE normal_inc_pc ENDIF ||
     | bne       | IF rs(a) /= rt(a) THEN branch_pc ELSE normal_inc_pc ENDIF ||
     | j         | jmp_pc                                                    ||
     | jal       | jmp_pc                                                    ||
     | ELSE      | may_exception_pc                                          ||
     %-----------+-----------------------------------------------------------%%
    ENDTABLE
   ENDIF


step_pc_2: THEOREM next_pc_2 = next_pc_1

%|- step_pc_2 : PROOF
%|- (then (decompose-equality)
%|-  (auto-rewrite-theory specification_trans_2 :always? T)
%|-  (auto-rewrite-theory specification_trans :always? T) (assert)
%|-  (split-abs-opcode))
%|- QED

%|- step_pc_2 : PROOF
%|- (then (decompose-equality) (auto-rewrite-theory specification_trans_2)
%|-  (split-abs-opcode) (expand next_pc_2) (expand next_pc_1) (lift-if)
%|-  (split-abs-opcode))
%|- QED

next_rf_2(a): regfile =
  IF NOT imem_addr_pred(pc(a)) THEN rf(a)
  ELSE LET 
   ins = instr(a), 
   op  = get_abs_opcode(ins),
   normal_inc_pc = pc(a) + 4
  IN
   IF exception?(ins)(a) THEN rf(a) ELSE
   TABLE
     op
   %------+-------------------------------------------------------------------------------------%%
   | add  |  assign_r(rf(a), rd(ins), rs(a) + rt(a))                                            || 
   | addu |  assign_r(rf(a), rd(ins), rs(a) + rt(a))                                            ||
   | sub  |  assign_r(rf(a), rd(ins), rs(a) - rt(a))                                            ||
   | subu |  assign_r(rf(a), rd(ins), rs(a) - rt(a))                                            ||
   | and  |  assign_r(rf(a), rd(ins), rs(a) AND rt(a))                                          ||
   | or   |  assign_r(rf(a), rd(ins), rs(a) OR rt(a))                                           ||
   | nor  |  assign_r(rf(a), rd(ins), rs(a) XOR rt(a))                                          ||
   | slt  |  assign_r(rf(a), rd(ins), alu_slt(rs(a), rt(a)))                                    ||
   | sltu |  assign_r(rf(a), rd(ins), alu_sltu(rs(a), rt(a)))                                   ||
   | srl  |  assign_r(rf(a), rd(ins), right_shift(shamt(ins), rt(a)))                           ||
   | sll  |  assign_r(rf(a), rd(ins), left_shift(shamt(ins), rt(a)))                            ||
   | addi |  assign_r(rf(a), rt(ins), rs(a) + sign_extend[16](32)(short_immed_of(ins)))         ||
   | addiu|  assign_r(rf(a), rt(ins), rs(a) + sign_extend[16](32)(short_immed_of(ins)))         ||
   | andi |  assign_r(rf(a), rt(ins), rs(a) AND zero_extend[16](32)(short_immed_of(ins)))       ||
   | ori  |  assign_r(rf(a), rt(ins), rs(a) OR zero_extend[16](32)(short_immed_of(ins)))        ||
   | lui  |  assign_r(rf(a), rt(ins), zero_extend_lsend[16](32)(short_immed_of(ins)))           ||
   | slti |  assign_r(rf(a), rt(ins), alu_slt(rs(a), sign_extend[16](32)(short_immed_of(ins)))) ||
   | sltiu|  assign_r(rf(a), rt(ins), alu_sltu(rs(a), zero_extend[16](32)(short_immed_of(ins))))||
   | lbu  |  assign_r(rf(a), rt(ins), zero_extend[8](32)(read8(dmem(a),mem_addr_calcu(a))))     ||
   | lb   |  assign_r(rf(a), rt(ins), sign_extend[8](32)(read8(dmem(a),mem_addr_calcu(a))))     ||
   | lh   |  assign_r(rf(a), rt(ins), sign_extend[16](32)(read16(dmem(a),mem_addr_calcu(a))))   ||
   | lhu  |  assign_r(rf(a), rt(ins), zero_extend[16](32)(read16(dmem(a),mem_addr_calcu(a))))   ||
   | lw   |  assign_r(rf(a), rt(ins), read32(dmem(a),mem_addr_calcu(a)))                        ||
   | ll   |  assign_r(rf(a), rt(ins), read32(dmem(a),mem_addr_calcu(a)))                        ||
   | jal  |  assign_r(rf(a), ra_reg,  normal_inc_pc)                                            ||
   | ELSE |  rf(a)                                                                              ||
   %------+-------------------------------------------------------------------------------------%%
   ENDTABLE
   ENDIF
  ENDIF

step_rf_2: THEOREM next_rf_2 = next_rf_1

%|- step_*_2 : PROOF
%|- (then (decompose-equality)
%|-  (auto-rewrite-theory specification_trans_2 :always? T)
%|-  (auto-rewrite-theory specification_trans :always? T) (assert)
%|-  (split-abs-opcode))
%|- QED

%|- step_rf_2 : PROOF
%|- (then (decompose-equality) (auto-rewrite-theory specification_trans_2)
%|-  (expand next_rf_2) (expand next_rf_1) (lift-if) (split-abs-opcode))
%|- QED

% ----- 数据存储器更新
next_dmem_2(a): data_memory = 
 IF NOT imem_addr_pred(pc(a)) THEN dmem(a) ELSE
   LET ins = instr(a), 
       op  = get_abs_opcode(ins), 
       src = rt(a)
   IN
   IF exception?(ins)(a) THEN dmem(a) ELSE 
    TABLE
      op
    %----+------------------------------------------------------------------------------%% 
    | sw |  write32(dmem(a),mem_addr_calcu(a),src)                                      ||
    | sc |  IF llflag(a) THEN write32(dmem(a),mem_addr_calcu(a),src) ELSE dmem(a) ENDIF ||
    | sh |  write16(dmem(a),mem_addr_calcu(a),src^(15,0))                               ||
    | sb |  write8(dmem(a),mem_addr_calcu(a),src^(7,0))                                 ||
    |ELSE|  dmem(a)                                                                     ||
    %----|------------------------------------------------------------------------------%%
    ENDTABLE
   ENDIF
  ENDIF

step_dmem_2: THEOREM next_dmem_2 = next_dmem_1

%|- step_dmem_2 : PROOF
%|- (then (decompose-equality) (auto-rewrite-theory specification_trans_2)
%|-  (expand next_dmem_2) (expand next_dmem_1) (lift-if) (split-abs-opcode))
%|- QED

next_epc_2(a): bvec[32] = 
 IF NOT imem_addr_pred(pc(a)) THEN pc(a) 
 ELSE   LET ins = instr(a) IN
   IF exception?(ins)(a) THEN pc(a) ELSE epc(a) ENDIF
 ENDIF

step_epc_2: THEOREM next_epc_2 = next_epc_1

%|- step_epc_2 : PROOF
%|- (then (decompose-equality) (auto-rewrite-theory specification_trans_2)
%|-  (expand next_epc_2) (expand next_epc_1) (lift-if) (split-abs-opcode))
%|- QED

next_llflag_2(a): bool =
 IF NOT imem_addr_pred(pc(a)) THEN FALSE
 ELSE 
 LET ins = instr(a), 
     op  = get_abs_opcode(ins)
 IN 
  IF exception?(ins)(a) THEN FALSE
  ELSE TABLE  
    op
  %----+-----------%%
  | ll | TRUE      ||
  | sc | FALSE     ||
  |ELSE| llflag(a) ||
  %----+-----------%%
  ENDTABLE
  ENDIF
 ENDIF

step_llflag_2: THEOREM next_llflag_2 = next_llflag_1

%|- step_llflag_2 : PROOF
%|- (then (decompose-equality) (auto-rewrite-theory specification_trans_2)
%|-  (expand next_llflag_2) (expand next_llflag_1) (lift-if)
%|-  (split-abs-opcode))
%|- QED

END specification_trans_2

implementation_rewrites_1: THEORY
BEGIN

IMPORTING implementation_trans_1

q: VAR state_I

Rewrite_dec_ex: LEMMA impl_dec_ex(I_step(q)) = impl_dec_id(q)
Rewrite_dec_mem: LEMMA impl_dec_mem(I_step(q)) = impl_dec_ex(q)
Rewrite_dec_wb: LEMMA impl_dec_wb(I_step(q)) = impl_dec_mem(q)

Rewrite_dst_ex: LEMMA impl_ex_dst(I_step(q)) = impl_id_dst(q)
Rewrite_dst_mem: LEMMA impl_mem_dst(I_step(q)) = impl_ex_dst(q)
Rewrite_dst_wb: LEMMA impl_wb_dst(I_step(q)) = impl_mem_dst(q)

Rewrite_instr_ex: LEMMA (I_step(q))`ex_s`instr = q`id_s`instr 
Rewrite_instr_mem: LEMMA (I_step(q))`mem_s`instr = q`ex_s`instr 
Rewrite_instr_wb: LEMMA (I_step(q))`wb_s`instr = q`mem_s`instr 

Rewrite_pc_ex: LEMMA (I_step(q))`ex_s`pc = q`id_s`pc 
Rewrite_pc_mem: LEMMA (I_step(q))`mem_s`pc = q`ex_s`pc 



%|- Rewrite_* : PROOF
%|- (then (skosimp) (auto-rewrite-theory implementation_rewrites_1) (impl-defs) (assert) (expand I_step) (assert))
%|- QED

Rewrite_sync_ex_rs_1: LEMMA syn1_ex_need_rs_ex(I_step(q)) IMPLIES syn1_id_need_rs_ex(q)
Rewrite_sync_ex_rt_1: LEMMA syn1_ex_need_rt_ex(I_step(q)) IMPLIES syn1_id_need_rt_ex(q)
Rewrite_sync_ex_rs_2: LEMMA syn1_ex_need_rs_ex(I_step(q)) IMPLIES NOT syn1_stall_issue(q)
Rewrite_sync_ex_rt_2: LEMMA syn1_ex_need_rt_ex(I_step(q)) IMPLIES NOT syn1_stall_issue(q)


Rewrite_sync_mem_rt_1: LEMMA syn1_mem_need_rt_mem(I_step(q)) IMPLIES syn1_ex_need_rt_mem(q)
Rewrite_sync_mem_rt_2: LEMMA syn1_ex_need_rt_mem(I_step(q)) IMPLIES syn1_id_need_rt_mem(q)



Rewrite_sync_wb_wb: LEMMA syn1_get_wb_wb?(I_step(q)) = syn1_get_mem_wb?(q)

Rewrite_sync_mem_wb: LEMMA syn1_get_mem_wb?(I_step(q)) IMPLIES syn1_get_ex_wb?(q)


%|- Rewrite_sync_* : PROOF
%|- (then (skosimp) (auto-rewrite-theory implementation_rewrites_1)
%|-  (impl-defs) (assert) (expand I_step) (assert) (flatten) (assert)
%|-  (case-analysis))
%|- QED


Rewrite_ex_need_rs_1: LEMMA q`ex_s`state = normal AND impl_dec_ex(q)`store? IMPLIES syn1_ex_need_rs_ex(q)
Rewrite_ex_need_rs_2: LEMMA q`ex_s`state = normal AND impl_dec_ex(q)`load? IMPLIES syn1_ex_need_rs_ex(q)
Rewrite_ex_selb_not_rt_1: LEMMA impl_dec_ex(q)`store? IMPLIES impl_dec_ex(q)`selb /= rt
Rewrite_ex_selb_not_rt_2: LEMMA impl_dec_ex(q)`load? IMPLIES impl_dec_ex(q)`selb /= rt
Rewrite_ex_store_not_ov: LEMMA impl_dec_ex(q)`store? IMPLIES NOT impl_dec_ex(q)`checkov?
Rewrite_ex_load_not_ov: LEMMA impl_dec_ex(q)`load? IMPLIES NOT impl_dec_ex(q)`checkov?

%|- Rewrite_ex_* : PROOF
%|- (then (skosimp) (impl-defs) (assert)
%|-  (auto-rewrite-theory decoder_props) (assert))
%|- QED

Rewrite_state_ex_mem: LEMMA I_step(q)`mem_s`state = normal IMPLIES q`ex_s`state = normal

%|- Rewrite_state_ex_mem : PROOF
%|- (then (skosimp) (impl-defs) (assert) (expand I_step) (assert)
%|-  (case-analysis))
%|- QED

Rewrite_ex_alu_wb_1: LEMMA q`ex_s`state = normal AND impl_dec_ex(q)`wb? AND impl_dec_ex(q)`wbsrc = aluout IMPLIES syn1_ex_need_rs_ex(q) OR syn1_ex_need_rt_ex(q)
Rewrite_ex_alu_wb_2: LEMMA q`ex_s`state = normal AND impl_dec_ex(q)`wb? AND impl_dec_ex(q)`wbsrc = aluout IMPLIES syn1_ex_need_rt_ex(q) OR impl_dec_ex(q)`selb /= rt

%|- Rewrite_ex_alu_wb_* : PROOF
%|- (then (skosimp) (impl-defs) (assert)
%|-  (auto-rewrite-theory decoder_props)
%|-  (auto-rewrite-theory instruction_decoder) (assert) (case-analysis))
%|- QED



END implementation_rewrites_1
